{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createCommentVNode as _createCommentVNode, vModelText as _vModelText, createElementVNode as _createElementVNode, withDirectives as _withDirectives, normalizeClass as _normalizeClass, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"main-container\"\n};\nconst _hoisted_2 = {\n  class: \"search-container\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_AppHeader = _resolveComponent(\"AppHeader\");\n  const _component_CreateBookmark = _resolveComponent(\"CreateBookmark\");\n  const _component_BookmarkList = _resolveComponent(\"BookmarkList\");\n  const _component_AppFooter = _resolveComponent(\"AppFooter\");\n  return _openBlock(), _createElementBlock(\"div\", {\n    class: _normalizeClass([$setup.mode, \"app-container\"])\n  }, [_createVNode(_component_AppHeader, {\n    mode: $setup.mode,\n    onToggleMode: $setup.toggleMode\n  }, null, 8 /* PROPS */, [\"mode\", \"onToggleMode\"]), _createElementVNode(\"div\", _hoisted_1, [_createCommentVNode(\" Search Bar \"), _createElementVNode(\"div\", _hoisted_2, [_withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.searchQuery = $event),\n    type: \"text\",\n    placeholder: \"Search bookmarks\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.searchQuery]])]), _createCommentVNode(\" Create a New Bookmark \"), _createVNode(_component_CreateBookmark, {\n    onCreateBookmark: $setup.addBookmark\n  }, null, 8 /* PROPS */, [\"onCreateBookmark\"]), _createCommentVNode(\" Bookmark List \"), _createVNode(_component_BookmarkList, {\n    bookmarks: $setup.filteredBookmarks,\n    onDeleteBookmark: $setup.deleteBookmark,\n    onUpdateBookmark: $setup.updateBookmark\n  }, null, 8 /* PROPS */, [\"bookmarks\", \"onDeleteBookmark\", \"onUpdateBookmark\"])]), _createVNode(_component_AppFooter, {\n    mode: $setup.mode\n  }, null, 8 /* PROPS */, [\"mode\"])], 2 /* CLASS */);\n}","map":{"version":3,"names":["class","_createElementBlock","_normalizeClass","$setup","mode","_createVNode","_component_AppHeader","onToggleMode","toggleMode","_createElementVNode","_hoisted_1","_createCommentVNode","_hoisted_2","_cache","$event","searchQuery","type","placeholder","_component_CreateBookmark","onCreateBookmark","addBookmark","_component_BookmarkList","bookmarks","filteredBookmarks","onDeleteBookmark","deleteBookmark","onUpdateBookmark","updateBookmark","_component_AppFooter"],"sources":["/Users/riyabm/Desktop/smart-bookmark-manager/src/App.vue"],"sourcesContent":["<template>\n  <div :class=\"mode\" class=\"app-container\">\n    <AppHeader :mode=\"mode\" @toggle-mode=\"toggleMode\" />\n    \n    <div class=\"main-container\">\n      <!-- Search Bar -->\n      <div class=\"search-container\">\n        <input v-model=\"searchQuery\" type=\"text\" placeholder=\"Search bookmarks\" />\n      </div>\n\n      <!-- Create a New Bookmark -->\n      <CreateBookmark @create-bookmark=\"addBookmark\" />\n\n      <!-- Bookmark List -->\n      <BookmarkList \n        :bookmarks=\"filteredBookmarks\" \n        @delete-bookmark=\"deleteBookmark\" \n        @update-bookmark=\"updateBookmark\" \n      />\n    </div>\n\n    <AppFooter :mode=\"mode\" />\n  </div>\n</template>\n\n<script>\nimport { ref, computed, onMounted, watch } from \"vue\";\nimport AppHeader from \"./components/AppHeader.vue\";\nimport AppFooter from \"./components/AppFooter.vue\";\nimport CreateBookmark from \"./components/CreateBookmark.vue\";\nimport BookmarkList from \"./components/BookmarkList.vue\";\n\nexport default {\n  components: {\n    AppHeader,\n    AppFooter,\n    CreateBookmark,\n    BookmarkList,\n  },\n\n  setup() {\n    const mode = ref(localStorage.getItem(\"mode\") || \"light\");\n    const bookmarks = ref([]);\n    const searchQuery = ref(\"\");\n\n    // Load bookmarks from localStorage when the app starts\n    onMounted(() => {\n      const savedData = localStorage.getItem(\"bookmarks\");\n      if (savedData) {\n        bookmarks.value = JSON.parse(savedData);\n      }\n    });\n\n    // Automatically update localStorage when bookmarks change\n    watch(bookmarks, (newData) => {\n      localStorage.setItem(\"bookmarks\", JSON.stringify(newData));\n    }, { deep: true });\n\n    // Filter bookmarks based on search\n    const filteredBookmarks = computed(() =>\n      bookmarks.value.filter(bookmark =>\n        bookmark.title.toLowerCase().includes(searchQuery.value.toLowerCase()) ||\n        bookmark.tags.some(tag => tag.toLowerCase().includes(searchQuery.value.toLowerCase()))\n      )\n    );\n\n    // Add a new bookmark\n    const addBookmark = (bookmark) => {\n      bookmarks.value.push({\n        id: Date.now(),\n        ...bookmark,\n        tags: bookmark.tags.split(\",\").map(tag => tag.trim()),\n      });\n    };\n\n    // Delete a bookmark\n    const deleteBookmark = (id) => {\n      bookmarks.value = bookmarks.value.filter(bookmark => bookmark.id !== id);\n    };\n\n    // Update a bookmark\n    const updateBookmark = (updatedBookmark) => {\n      const index = bookmarks.value.findIndex(bookmark => bookmark.id === updatedBookmark.id);\n      if (index !== -1) {\n        bookmarks.value[index] = { ...updatedBookmark };\n      }\n    };\n\n    // Toggle light/dark mode\n    const toggleMode = () => {\n      mode.value = mode.value === \"light\" ? \"dark\" : \"light\";\n      localStorage.setItem(\"mode\", mode.value);\n    };\n\n    return { \n      mode, \n      bookmarks, \n      searchQuery, \n      filteredBookmarks, \n      addBookmark, \n      deleteBookmark, \n      updateBookmark, \n      toggleMode \n    };\n  }\n};\n</script>\n\n<style scoped>\n.app-container {\n  font-family: Arial, sans-serif;\n}\n\n.app-container.light {\n  background: #f0f0f0;\n  color: #000;\n}\n\n.app-container.dark {\n  background: #121212;\n  color: #fff;\n}\n\n/* Search Bar */\n.search-container {\n  display: flex;\n  justify-content: center;\n  margin-bottom: 20px;\n}\n\n.search-container input {\n  padding: 10px;\n  font-size: 14px;\n  width: 300px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n}\n</style>\n"],"mappings":";;EAISA,KAAK,EAAC;AAAgB;;EAEpBA,KAAK,EAAC;AAAkB;;;;;;uBALjCC,mBAAA,CAqBM;IArBAD,KAAK,EADbE,eAAA,EACeC,MAAA,CAAAC,IAAI,EAAQ,eAAe;MACtCC,YAAA,CAAoDC,oBAAA;IAAxCF,IAAI,EAAED,MAAA,CAAAC,IAAI;IAAGG,YAAW,EAAEJ,MAAA,CAAAK;qDAEtCC,mBAAA,CAeM,OAfNC,UAeM,GAdJC,mBAAA,gBAAmB,EACnBF,mBAAA,CAEM,OAFNG,UAEM,G,gBADJH,mBAAA,CAA0E;IAPlF,uBAAAI,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAOwBX,MAAA,CAAAY,WAAW,GAAAD,MAAA;IAAEE,IAAI,EAAC,MAAM;IAACC,WAAW,EAAC;iDAArCd,MAAA,CAAAY,WAAW,E,KAG7BJ,mBAAA,2BAA8B,EAC9BN,YAAA,CAAiDa,yBAAA;IAAhCC,gBAAe,EAAEhB,MAAA,CAAAiB;EAAW,+CAE7CT,mBAAA,mBAAsB,EACtBN,YAAA,CAIEgB,uBAAA;IAHCC,SAAS,EAAEnB,MAAA,CAAAoB,iBAAiB;IAC5BC,gBAAe,EAAErB,MAAA,CAAAsB,cAAc;IAC/BC,gBAAe,EAAEvB,MAAA,CAAAwB;oFAItBtB,YAAA,CAA0BuB,oBAAA;IAAdxB,IAAI,EAAED,MAAA,CAAAC;EAAI,kC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}