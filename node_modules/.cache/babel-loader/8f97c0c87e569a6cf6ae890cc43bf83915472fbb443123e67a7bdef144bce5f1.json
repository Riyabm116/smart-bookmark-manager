{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport { ref, onMounted, watch } from \"vue\";\nimport AppHeader from \"./components/AppHeader.vue\";\nimport AppFooter from \"./components/AppFooter.vue\";\nimport CreateBookmark from \"./components/CreateBookmark.vue\";\nimport BookmarkList from \"./components/BookmarkList.vue\";\nexport default {\n  components: {\n    AppHeader,\n    AppFooter,\n    CreateBookmark,\n    BookmarkList\n  },\n  setup() {\n    const bookmarks = ref([]);\n\n    // Load from localStorage when app starts\n    onMounted(() => {\n      const savedBookmarks = localStorage.getItem(\"bookmarks\");\n      if (savedBookmarks) {\n        bookmarks.value = JSON.parse(savedBookmarks);\n      }\n    });\n\n    // Save changes to localStorage\n    watch(bookmarks, newBookmarks => {\n      localStorage.setItem(\"bookmarks\", JSON.stringify(newBookmarks));\n    }, {\n      deep: true\n    });\n    const addBookmark = bookmark => {\n      bookmarks.value.push({\n        id: Date.now(),\n        // Unique ID\n        ...bookmark,\n        tags: bookmark.tags.split(\",\").map(tag => tag.trim())\n      });\n    };\n    const deleteBookmark = id => {\n      bookmarks.value = bookmarks.value.filter(bookmark => bookmark.id !== id);\n    };\n    const updateBookmark = updatedBookmark => {\n      const index = bookmarks.value.findIndex(bookmark => bookmark.id === updatedBookmark.id);\n      if (index !== -1) {\n        bookmarks.value[index] = {\n          ...updatedBookmark\n        };\n      }\n    };\n    return {\n      bookmarks,\n      addBookmark,\n      deleteBookmark,\n      updateBookmark\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","watch","AppHeader","AppFooter","CreateBookmark","BookmarkList","components","setup","bookmarks","savedBookmarks","localStorage","getItem","value","JSON","parse","newBookmarks","setItem","stringify","deep","addBookmark","bookmark","push","id","Date","now","tags","split","map","tag","trim","deleteBookmark","filter","updateBookmark","updatedBookmark","index","findIndex"],"sources":["/Users/riyabm/Desktop/smart-bookmark-manager/src/App.vue"],"sourcesContent":["<template>\n  <div class=\"app-container\">\n    <AppHeader />\n    <div class=\"main-container\">\n      <!-- Create Bookmark Component -->\n      <CreateBookmark @create-bookmark=\"addBookmark\" />\n      \n      <!-- Bookmark List Display -->\n      <BookmarkList \n        :bookmarks=\"bookmarks\" \n        @delete-bookmark=\"deleteBookmark\" \n        @update-bookmark=\"updateBookmark\" \n      />\n    </div>\n    <AppFooter />\n  </div>\n</template>\n\n<script>\nimport { ref, onMounted, watch } from \"vue\";\nimport AppHeader from \"./components/AppHeader.vue\";\nimport AppFooter from \"./components/AppFooter.vue\";\nimport CreateBookmark from \"./components/CreateBookmark.vue\"; \nimport BookmarkList from \"./components/BookmarkList.vue\";\n\nexport default {\n  components: {\n    AppHeader,\n    AppFooter,\n    CreateBookmark, \n    BookmarkList,\n  },\n  setup() {\n    const bookmarks = ref([]);\n\n    // Load from localStorage when app starts\n    onMounted(() => {\n      const savedBookmarks = localStorage.getItem(\"bookmarks\");\n      if (savedBookmarks) {\n        bookmarks.value = JSON.parse(savedBookmarks);\n      }\n    });\n\n    // Save changes to localStorage\n    watch(bookmarks, (newBookmarks) => {\n      localStorage.setItem(\"bookmarks\", JSON.stringify(newBookmarks));\n    }, { deep: true });\n\n    const addBookmark = (bookmark) => {\n      bookmarks.value.push({\n        id: Date.now(), // Unique ID\n        ...bookmark,\n        tags: bookmark.tags.split(\",\").map(tag => tag.trim()),\n      });\n    };\n\n    const deleteBookmark = (id) => {\n      bookmarks.value = bookmarks.value.filter(bookmark => bookmark.id !== id);\n    };\n\n    const updateBookmark = (updatedBookmark) => {\n      const index = bookmarks.value.findIndex(bookmark => bookmark.id === updatedBookmark.id);\n      if (index !== -1) {\n        bookmarks.value[index] = { ...updatedBookmark };\n      }\n    };\n\n    return { bookmarks, addBookmark, deleteBookmark, updateBookmark };\n  }\n};\n</script>\n"],"mappings":";;;;AAmBA,SAASA,GAAG,EAAEC,SAAS,EAAEC,KAAI,QAAS,KAAK;AAC3C,OAAOC,SAAQ,MAAO,4BAA4B;AAClD,OAAOC,SAAQ,MAAO,4BAA4B;AAClD,OAAOC,cAAa,MAAO,iCAAiC;AAC5D,OAAOC,YAAW,MAAO,+BAA+B;AAExD,eAAe;EACbC,UAAU,EAAE;IACVJ,SAAS;IACTC,SAAS;IACTC,cAAc;IACdC;EACF,CAAC;EACDE,KAAKA,CAAA,EAAG;IACN,MAAMC,SAAQ,GAAIT,GAAG,CAAC,EAAE,CAAC;;IAEzB;IACAC,SAAS,CAAC,MAAM;MACd,MAAMS,cAAa,GAAIC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;MACxD,IAAIF,cAAc,EAAE;QAClBD,SAAS,CAACI,KAAI,GAAIC,IAAI,CAACC,KAAK,CAACL,cAAc,CAAC;MAC9C;IACF,CAAC,CAAC;;IAEF;IACAR,KAAK,CAACO,SAAS,EAAGO,YAAY,IAAK;MACjCL,YAAY,CAACM,OAAO,CAAC,WAAW,EAAEH,IAAI,CAACI,SAAS,CAACF,YAAY,CAAC,CAAC;IACjE,CAAC,EAAE;MAAEG,IAAI,EAAE;IAAK,CAAC,CAAC;IAElB,MAAMC,WAAU,GAAKC,QAAQ,IAAK;MAChCZ,SAAS,CAACI,KAAK,CAACS,IAAI,CAAC;QACnBC,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC;QAAE;QAChB,GAAGJ,QAAQ;QACXK,IAAI,EAAEL,QAAQ,CAACK,IAAI,CAACC,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACC,GAAE,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC;MACtD,CAAC,CAAC;IACJ,CAAC;IAED,MAAMC,cAAa,GAAKR,EAAE,IAAK;MAC7Bd,SAAS,CAACI,KAAI,GAAIJ,SAAS,CAACI,KAAK,CAACmB,MAAM,CAACX,QAAO,IAAKA,QAAQ,CAACE,EAAC,KAAMA,EAAE,CAAC;IAC1E,CAAC;IAED,MAAMU,cAAa,GAAKC,eAAe,IAAK;MAC1C,MAAMC,KAAI,GAAI1B,SAAS,CAACI,KAAK,CAACuB,SAAS,CAACf,QAAO,IAAKA,QAAQ,CAACE,EAAC,KAAMW,eAAe,CAACX,EAAE,CAAC;MACvF,IAAIY,KAAI,KAAM,CAAC,CAAC,EAAE;QAChB1B,SAAS,CAACI,KAAK,CAACsB,KAAK,IAAI;UAAE,GAAGD;QAAgB,CAAC;MACjD;IACF,CAAC;IAED,OAAO;MAAEzB,SAAS;MAAEW,WAAW;MAAEW,cAAc;MAAEE;IAAe,CAAC;EACnE;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}