{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createCommentVNode as _createCommentVNode, vModelText as _vModelText, createElementVNode as _createElementVNode, withDirectives as _withDirectives, vModelSelect as _vModelSelect, createStaticVNode as _createStaticVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"app-container\"\n};\nconst _hoisted_2 = {\n  class: \"main-container\"\n};\nconst _hoisted_3 = {\n  class: \"search-filter\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_AppHeader = _resolveComponent(\"AppHeader\");\n  const _component_CreateBookmark = _resolveComponent(\"CreateBookmark\");\n  const _component_BookmarkList = _resolveComponent(\"BookmarkList\");\n  const _component_AppFooter = _resolveComponent(\"AppFooter\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_AppHeader), _createElementVNode(\"div\", _hoisted_2, [_createCommentVNode(\" Search and Filter \"), _createElementVNode(\"div\", _hoisted_3, [_withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.searchQuery = $event),\n    type: \"text\",\n    placeholder: \"Search bookmarks by title or tags\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.searchQuery]]), _withDirectives(_createElementVNode(\"select\", {\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $setup.selectedCategory = $event),\n    onChange: _cache[2] || (_cache[2] = (...args) => _ctx.applyFilter && _ctx.applyFilter(...args))\n  }, _cache[3] || (_cache[3] = [_createStaticVNode(\"<option value=\\\"\\\" data-v-7ba5bd90>All Categories</option><option value=\\\"Work\\\" data-v-7ba5bd90>Work</option><option value=\\\"Personal\\\" data-v-7ba5bd90>Personal</option><option value=\\\"Learning\\\" data-v-7ba5bd90>Learning</option><option value=\\\"Entertainment\\\" data-v-7ba5bd90>Entertainment</option>\", 5)]), 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelSelect, $setup.selectedCategory]])]), _createCommentVNode(\" Create Bookmark Component \"), _createVNode(_component_CreateBookmark, {\n    onCreateBookmark: $setup.addBookmark\n  }, null, 8 /* PROPS */, [\"onCreateBookmark\"]), _createCommentVNode(\" Bookmark List Display \"), _createVNode(_component_BookmarkList, {\n    bookmarks: $setup.filteredBookmarks,\n    onDeleteBookmark: $setup.deleteBookmark,\n    onUpdateBookmark: $setup.updateBookmark\n  }, null, 8 /* PROPS */, [\"bookmarks\", \"onDeleteBookmark\", \"onUpdateBookmark\"])]), _createVNode(_component_AppFooter)]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createVNode","_component_AppHeader","_createElementVNode","_hoisted_2","_createCommentVNode","_hoisted_3","_cache","$event","$setup","searchQuery","type","placeholder","selectedCategory","onChange","args","_ctx","applyFilter","_createStaticVNode","_component_CreateBookmark","onCreateBookmark","addBookmark","_component_BookmarkList","bookmarks","filteredBookmarks","onDeleteBookmark","deleteBookmark","onUpdateBookmark","updateBookmark","_component_AppFooter"],"sources":["/Users/riyabm/Desktop/smart-bookmark-manager/src/App.vue"],"sourcesContent":["<template>\n  <div class=\"app-container\">\n    <AppHeader />\n    <div class=\"main-container\">\n      <!-- Search and Filter -->\n      <div class=\"search-filter\">\n        <input \n          v-model=\"searchQuery\" \n          type=\"text\" \n          placeholder=\"Search bookmarks by title or tags\" \n        />\n        <select v-model=\"selectedCategory\" @change=\"applyFilter\">\n          <option value=\"\">All Categories</option>\n          <option value=\"Work\">Work</option>\n          <option value=\"Personal\">Personal</option>\n          <option value=\"Learning\">Learning</option>\n          <option value=\"Entertainment\">Entertainment</option>\n        </select>\n      </div>\n\n      <!-- Create Bookmark Component -->\n      <CreateBookmark @create-bookmark=\"addBookmark\" />\n\n      <!-- Bookmark List Display -->\n      <BookmarkList \n        :bookmarks=\"filteredBookmarks\" \n        @delete-bookmark=\"deleteBookmark\" \n        @update-bookmark=\"updateBookmark\" \n      />\n    </div>\n    <AppFooter />\n  </div>\n</template>\n\n<script>\nimport { ref, onMounted, watch, computed } from \"vue\";\nimport AppHeader from \"./components/AppHeader.vue\";\nimport AppFooter from \"./components/AppFooter.vue\";\nimport CreateBookmark from \"./components/CreateBookmark.vue\";\nimport BookmarkList from \"./components/BookmarkList.vue\";\n\nexport default {\n  components: {\n    AppHeader,\n    AppFooter,\n    CreateBookmark,\n    BookmarkList,\n  },\n  setup() {\n    const bookmarks = ref([]);\n    const searchQuery = ref('');\n    const selectedCategory = ref('');\n    const filteredBookmarks = computed(() => {\n      return bookmarks.value.filter(bookmark => {\n        const matchesSearch = \n          bookmark.title.toLowerCase().includes(searchQuery.value.toLowerCase()) || \n          bookmark.tags.some(tag => tag.toLowerCase().includes(searchQuery.value.toLowerCase()));\n        \n        const matchesCategory = selectedCategory.value ? bookmark.category === selectedCategory.value : true;\n\n        return matchesSearch && matchesCategory;\n      });\n    });\n\n    // Load from localStorage when app starts\n    onMounted(() => {\n      const savedBookmarks = localStorage.getItem(\"bookmarks\");\n      if (savedBookmarks) {\n        bookmarks.value = JSON.parse(savedBookmarks);\n      }\n    });\n\n    // Save changes to localStorage\n    watch(bookmarks, (newBookmarks) => {\n      localStorage.setItem(\"bookmarks\", JSON.stringify(newBookmarks));\n    }, { deep: true });\n\n    const addBookmark = (bookmark) => {\n      bookmarks.value.push({\n        id: Date.now(), // Unique ID\n        ...bookmark,\n        tags: bookmark.tags.split(\",\").map(tag => tag.trim()),\n      });\n    };\n\n    const deleteBookmark = (id) => {\n      bookmarks.value = bookmarks.value.filter(bookmark => bookmark.id !== id);\n    };\n\n    const updateBookmark = (updatedBookmark) => {\n      const index = bookmarks.value.findIndex(bookmark => bookmark.id === updatedBookmark.id);\n      if (index !== -1) {\n        bookmarks.value[index] = { ...updatedBookmark };\n      }\n    };\n\n    // Function to apply filter\n    const applyFilter = () => {\n      // This will automatically update the filteredBookmarks computed property.\n    };\n\n    return { \n      bookmarks, \n      addBookmark, \n      deleteBookmark, \n      updateBookmark, \n      searchQuery, \n      selectedCategory, \n      filteredBookmarks,\n    };\n  }\n};\n</script>\n\n<style scoped>\n.search-filter {\n  display: flex;\n  gap: 10px;\n  margin-bottom: 20px;\n}\n\n.search-filter input {\n  padding: 8px;\n  font-size: 14px;\n}\n\n.search-filter select {\n  padding: 8px;\n  font-size: 14px;\n}\n</style>\n"],"mappings":";;EACOA,KAAK,EAAC;AAAe;;EAEnBA,KAAK,EAAC;AAAgB;;EAEpBA,KAAK,EAAC;AAAe;;;;;;uBAJ9BC,mBAAA,CA8BM,OA9BNC,UA8BM,GA7BJC,YAAA,CAAaC,oBAAA,GACbC,mBAAA,CA0BM,OA1BNC,UA0BM,GAzBJC,mBAAA,uBAA0B,EAC1BF,mBAAA,CAaM,OAbNG,UAaM,G,gBAZJH,mBAAA,CAIE;IAVV,uBAAAI,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAOmBC,MAAA,CAAAC,WAAW,GAAAF,MAAA;IACpBG,IAAI,EAAC,MAAM;IACXC,WAAW,EAAC;iDAFHH,MAAA,CAAAC,WAAW,E,mBAItBP,mBAAA,CAMS;IAjBjB,uBAAAI,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAWyBC,MAAA,CAAAI,gBAAgB,GAAAL,MAAA;IAAGM,QAAM,EAAAP,MAAA,QAAAA,MAAA,UAAAQ,IAAA,KAAEC,IAAA,CAAAC,WAAA,IAAAD,IAAA,CAAAC,WAAA,IAAAF,IAAA,CAAW;gCAX/DG,kBAAA,oT,2DAWyBT,MAAA,CAAAI,gBAAgB,E,KASnCR,mBAAA,+BAAkC,EAClCJ,YAAA,CAAiDkB,yBAAA;IAAhCC,gBAAe,EAAEX,MAAA,CAAAY;EAAW,+CAE7ChB,mBAAA,2BAA8B,EAC9BJ,YAAA,CAIEqB,uBAAA;IAHCC,SAAS,EAAEd,MAAA,CAAAe,iBAAiB;IAC5BC,gBAAe,EAAEhB,MAAA,CAAAiB,cAAc;IAC/BC,gBAAe,EAAElB,MAAA,CAAAmB;oFAGtB3B,YAAA,CAAa4B,oBAAA,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}