{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport { ref } from 'vue';\nexport default {\n  props: {\n    mode: String,\n    bookmarks: Array // Assuming you have bookmarks prop passed from parent component\n  },\n  emits: ['toggle-mode', 'toggle-form'],\n  setup(props, {\n    emit\n  }) {\n    const searchQuery = ref('');\n\n    // Function to handle search\n    const searchBookmarks = () => {\n      // Filter bookmarks based on the search query\n      if (searchQuery.value.trim() === '') {\n        console.log('Search query is empty');\n      } else {\n        const filteredBookmarks = props.bookmarks.filter(bookmark => bookmark.title.toLowerCase().includes(searchQuery.value.toLowerCase()) || bookmark.url.toLowerCase().includes(searchQuery.value.toLowerCase()));\n        console.log('Filtered Bookmarks:', filteredBookmarks); // Display filtered bookmarks\n        // You can also emit an event here to update the parent component with the filtered results\n      }\n    };\n    const toggleMode = () => {\n      emit('toggle-mode');\n    };\n    const toggleForm = () => {\n      emit('toggle-form');\n    };\n    return {\n      toggleMode,\n      searchQuery,\n      searchBookmarks,\n      toggleForm\n    };\n  }\n};","map":{"version":3,"names":["ref","props","mode","String","bookmarks","Array","emits","setup","emit","searchQuery","searchBookmarks","value","trim","console","log","filteredBookmarks","filter","bookmark","title","toLowerCase","includes","url","toggleMode","toggleForm"],"sources":["/Users/riyabm/Documents/GitHub/smart-bookmark-manager/src/components/AppHeader.vue"],"sourcesContent":["<template>\n  <header :class=\"mode\">\n    <div class=\"logo\">\n      <h1>Smart Bookmark Manager</h1>\n    </div>\n    <div class=\"controls\">\n      <input \n        v-model=\"searchQuery\" \n        class=\"search-bar\"\n        type=\"text\" \n        placeholder=\"Search Bookmarks\" \n      />\n      <button @click=\"searchBookmarks\" class=\"search-btn\">Search</button>\n\n      <button @click=\"toggleForm\" class=\"add-bookmark-btn\">+</button>\n      \n      <button @click=\"toggleMode\" class=\"mode-toggle-btn\">\n        {{ mode === 'light' ? 'Dark Mode' : 'Light Mode' }}\n      </button>\n    </div>\n  </header>\n</template>\n\n<script>\nimport { ref } from 'vue';\n\nexport default {\n  props: {\n    mode: String,\n    bookmarks: Array,  // Assuming you have bookmarks prop passed from parent component\n  },\n  emits: ['toggle-mode', 'toggle-form'],\n  setup(props, { emit }) {\n    const searchQuery = ref('');\n    \n    // Function to handle search\n    const searchBookmarks = () => {\n      // Filter bookmarks based on the search query\n      if (searchQuery.value.trim() === '') {\n        console.log('Search query is empty');\n      } else {\n        const filteredBookmarks = props.bookmarks.filter(bookmark => \n          bookmark.title.toLowerCase().includes(searchQuery.value.toLowerCase()) ||\n          bookmark.url.toLowerCase().includes(searchQuery.value.toLowerCase())\n        );\n        console.log('Filtered Bookmarks:', filteredBookmarks); // Display filtered bookmarks\n        // You can also emit an event here to update the parent component with the filtered results\n      }\n    };\n\n    const toggleMode = () => {\n      emit('toggle-mode');\n    };\n\n    const toggleForm = () => {\n      emit('toggle-form');\n    };\n\n    return { \n      toggleMode, \n      searchQuery, \n      searchBookmarks, \n      toggleForm\n    };\n  }\n};\n</script>\n\n<style scoped>\nheader {\n  padding: 1rem;\n  background-color: var(--header-bg, #ffffff);\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\nheader.light {\n  background-color: #ffffff;\n  color: #000;\n}\n\nheader.dark {\n  background-color: #333333;\n  color: #fff;\n}\n\n.controls {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n}\n\n.search-bar {\n  padding: 8px;\n  font-size: 14px;\n  width: 200px;\n  border-radius: 4px;\n  border: 1px solid #ccc;\n}\n\n.search-btn {\n  padding: 8px 16px;\n  font-size: 14px;\n  cursor: pointer;\n  background-color: #0070f3;\n  color: white;\n  border: none;\n  border-radius: 5px;\n}\n\n.search-btn:hover {\n  background-color: #0056c1;\n}\n\n.mode-toggle-btn {\n  padding: 10px 20px;\n  border: none;\n  cursor: pointer;\n  background-color: #0070f3;\n  color: white;\n  border-radius: 5px;\n  font-size: 14px;\n}\n\n.mode-toggle-btn:hover {\n  background-color: #0056c1;\n}\n\n.add-bookmark-btn {\n  padding: 8px 15px;\n  font-size: 18px;\n  font-weight: bold;\n  background-color: #28a745;\n  color: white;\n  border: none;\n  border-radius: 50%;\n  cursor: pointer;\n}\n\n.add-bookmark-btn:hover {\n  background-color: #218838;\n}\n</style>\n"],"mappings":";;AAwBA,SAASA,GAAE,QAAS,KAAK;AAEzB,eAAe;EACbC,KAAK,EAAE;IACLC,IAAI,EAAEC,MAAM;IACZC,SAAS,EAAEC,KAAK,CAAG;EACrB,CAAC;EACDC,KAAK,EAAE,CAAC,aAAa,EAAE,aAAa,CAAC;EACrCC,KAAKA,CAACN,KAAK,EAAE;IAAEO;EAAK,CAAC,EAAE;IACrB,MAAMC,WAAU,GAAIT,GAAG,CAAC,EAAE,CAAC;;IAE3B;IACA,MAAMU,eAAc,GAAIA,CAAA,KAAM;MAC5B;MACA,IAAID,WAAW,CAACE,KAAK,CAACC,IAAI,CAAC,MAAM,EAAE,EAAE;QACnCC,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;MACtC,OAAO;QACL,MAAMC,iBAAgB,GAAId,KAAK,CAACG,SAAS,CAACY,MAAM,CAACC,QAAO,IACtDA,QAAQ,CAACC,KAAK,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACX,WAAW,CAACE,KAAK,CAACQ,WAAW,CAAC,CAAC,KACrEF,QAAQ,CAACI,GAAG,CAACF,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACX,WAAW,CAACE,KAAK,CAACQ,WAAW,CAAC,CAAC,CACrE,CAAC;QACDN,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEC,iBAAiB,CAAC,EAAE;QACvD;MACF;IACF,CAAC;IAED,MAAMO,UAAS,GAAIA,CAAA,KAAM;MACvBd,IAAI,CAAC,aAAa,CAAC;IACrB,CAAC;IAED,MAAMe,UAAS,GAAIA,CAAA,KAAM;MACvBf,IAAI,CAAC,aAAa,CAAC;IACrB,CAAC;IAED,OAAO;MACLc,UAAU;MACVb,WAAW;MACXC,eAAe;MACfa;IACF,CAAC;EACH;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}