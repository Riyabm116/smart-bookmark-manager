{"ast":null,"code":"export default {\n  data() {\n    return {\n      step: 1,\n      // Track the current step\n      bookmark: {\n        title: '',\n        url: '',\n        tags: '',\n        category: ''\n      },\n      mode: localStorage.getItem(\"mode\") || \"light\" // Get mode from localStorage (light or dark)\n    };\n  },\n  methods: {\n    // Move to the next step\n    nextStep() {\n      if (this.step < 4) {\n        this.step += 1;\n      }\n    },\n    // Finish the bookmark creation\n    finishBookmark() {\n      this.$emit('create-bookmark', this.bookmark);\n      this.clearForm();\n    },\n    // Reset the form\n    clearForm() {\n      this.bookmark = {\n        title: '',\n        url: '',\n        tags: '',\n        category: ''\n      };\n      this.step = 1; // Reset to the first step\n    },\n    // Toggle the dark mode\n    toggleMode() {\n      this.mode = this.mode === \"light\" ? \"dark\" : \"light\";\n      localStorage.setItem(\"mode\", this.mode); // Save the mode to localStorage\n    }\n  }\n};","map":{"version":3,"names":["data","step","bookmark","title","url","tags","category","mode","localStorage","getItem","methods","nextStep","finishBookmark","$emit","clearForm","toggleMode","setItem"],"sources":["/Users/riyabm/Documents/GitHub/smart-bookmark-manager/src/components/CreateBookmark.vue"],"sourcesContent":["<template>\n  <div :class=\"mode\">\n    <div class=\"bookmark-form-container\">\n      <div class=\"bookmark-form\">\n        <h2 class=\"form-heading\">Add Bookmark</h2>\n        \n        \n        <div v-if=\"step === 1\" class=\"form-group\">\n          <label for=\"title\"> Title</label>\n          <input \n            v-model=\"bookmark.title\" \n            type=\"text\" \n            id=\"title\" \n            placeholder=\"Enter bookmark title\" \n            required \n          />\n          <button @click=\"nextStep\" class=\"next-button\">Next</button>\n        </div>\n\n        \n        <div v-if=\"step === 2\" class=\"form-group\">\n          <label for=\"url\"> URL</label>\n          <input \n            v-model=\"bookmark.url\" \n            type=\"url\" \n            id=\"url\" \n            placeholder=\"Enter bookmark URL\" \n            required \n          />\n          <button @click=\"nextStep\" class=\"next-button\">Next</button>\n        </div>\n\n        \n        <div v-if=\"step === 3\" class=\"form-group\">\n          <label for=\"tags\">Tags (optional)</label>\n          <input \n            v-model=\"bookmark.tags\" \n            type=\"text\" \n            id=\"tags\" \n            placeholder=\"Enter tags (comma separated)\" \n          />\n          <button @click=\"nextStep\" class=\"next-button\">Next</button>\n        </div>\n\n        \n        <div v-if=\"step === 4\" class=\"form-group\">\n          <label for=\"category\">Category</label>\n          <select v-model=\"bookmark.category\" id=\"category\" required>\n            <option value=\"\">Select Category</option>\n            <option value=\"Work\">Work</option>\n            <option value=\"Personal\">Personal</option>\n            <option value=\"Other\">Other</option>\n          </select>\n          <button @click=\"finishBookmark\" class=\"finish-button\">Finish</button>\n        </div>\n      </div>\n    </div>\n\n    \n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      step: 1, // Track the current step\n      bookmark: {\n        title: '',\n        url: '',\n        tags: '',\n        category: '',\n      },\n      mode: localStorage.getItem(\"mode\") || \"light\", // Get mode from localStorage (light or dark)\n    };\n  },\n  methods: {\n    // Move to the next step\n    nextStep() {\n      if (this.step < 4) {\n        this.step += 1;\n      }\n    },\n\n    // Finish the bookmark creation\n    finishBookmark() {\n      this.$emit('create-bookmark', this.bookmark);\n      this.clearForm();\n    },\n\n    // Reset the form\n    clearForm() {\n      this.bookmark = { title: '', url: '', tags: '', category: '' };\n      this.step = 1; // Reset to the first step\n    },\n\n    // Toggle the dark mode\n    toggleMode() {\n      this.mode = this.mode === \"light\" ? \"dark\" : \"light\";\n      localStorage.setItem(\"mode\", this.mode); // Save the mode to localStorage\n    },\n  }\n};\n</script>\n\n<style scoped>\n/* Container for the form */\n.bookmark-form-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: 30vh;\n  padding: 20px;\n}\n\n.bookmark-form {\n  background: #fff;\n  padding: 20px;\n  border-radius: 8px;\n  box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);\n  width: 100%;\n  max-width: 400px;\n  font-family: 'Arial', sans-serif;\n}\n\n/* Form heading */\n.form-heading {\n  text-align: left; /* Align title to the left */\n  margin-bottom: 15px;\n  font-size: 1.4rem;\n  font-weight: bold;\n  color: #333;\n}\n\n/* Styling the form inputs */\n.form-group {\n  margin-bottom: 15px;\n  display: flex;\n  flex-direction: column;\n}\n\nlabel {\n  display: block;\n  font-size: 13px;\n  font-weight: 500;\n  color: #555;\n  margin-bottom: 6px;\n}\n\ninput, select {\n  width: 100%;\n  padding: 8px;\n  font-size: 13px;\n  border-radius: 6px;\n  border: 1px solid #ddd;\n  box-sizing: border-box;\n  outline: none;\n  background-color: #f9f9f9;\n  transition: border-color 0.3s ease;\n}\n\ninput:focus, select:focus {\n  border-color: #0070f3;\n  background-color: #ffffff;\n}\n\ninput::placeholder {\n  color: #aaa;\n}\n\n/* Button styling */\nbutton {\n  padding: 8px 18px;\n  font-size: 13px;\n  font-weight: bold;\n  border-radius: 6px;\n  border: none;\n  cursor: pointer;\n  transition: background-color 0.3s ease;\n}\n\n.next-button {\n  background-color: #0070f3;\n  color: #fff;\n  padding: 6px 12px;\n  width: auto;\n  margin-left: auto; /* Pushes button to the right */\n  align-self: flex-end; /* Ensures button stays on the right */\n}\n\n.next-button:hover {\n  background-color: #0056c1;\n}\n\n.finish-button {\n  background-color: #28a745;\n  color: #fff;\n}\n\n.finish-button:hover {\n  background-color: #218838;\n}\n\n/* Global styles for light mode */\nbody {\n  margin: 0;\n  padding: 0;\n  font-family: 'Arial', sans-serif;\n}\n\nmain {\n  padding: 0;\n  margin: 0;\n}\n\nheader, footer {\n  margin: 0;\n  padding: 5px 0;\n  text-align: center;\n}\n\n.app-container {\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh;\n}\n\n.main-container {\n  flex-grow: 1;\n  padding: 15px;\n}\n\nfooter {\n  padding: 5px 0;\n  background-color: #f1f1f1;\n}\n\n/* Light Mode */\n.app-container.light {\n  background-color: #f4f4f4;\n  color: #333;\n}\n\n/* Dark Mode */\n.app-container.dark {\n  background-color: #121212;\n  color: #f5f5f5;\n}\n\n.app-container.dark .bookmark-form {\n  background: #333;\n  color: #fff;\n}\n\n.app-container.dark .form-heading {\n  color: #f5f5f5;\n}\n\n.app-container.dark .form-group input,\n.app-container.dark .form-group select {\n  background-color: #555;\n  color: #fff;\n}\n\n.app-container.dark button {\n  background-color: #0070f3;\n  color: #fff;\n}\n\n.app-container.dark button:hover {\n  background-color: #0056c1;\n}\n\n</style>"],"mappings":"AA+DA,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,IAAI,EAAE,CAAC;MAAE;MACTC,QAAQ,EAAE;QACRC,KAAK,EAAE,EAAE;QACTC,GAAG,EAAE,EAAE;QACPC,IAAI,EAAE,EAAE;QACRC,QAAQ,EAAE;MACZ,CAAC;MACDC,IAAI,EAAEC,YAAY,CAACC,OAAO,CAAC,MAAM,KAAK,OAAO,CAAE;IACjD,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP;IACAC,QAAQA,CAAA,EAAG;MACT,IAAI,IAAI,CAACV,IAAG,GAAI,CAAC,EAAE;QACjB,IAAI,CAACA,IAAG,IAAK,CAAC;MAChB;IACF,CAAC;IAED;IACAW,cAAcA,CAAA,EAAG;MACf,IAAI,CAACC,KAAK,CAAC,iBAAiB,EAAE,IAAI,CAACX,QAAQ,CAAC;MAC5C,IAAI,CAACY,SAAS,CAAC,CAAC;IAClB,CAAC;IAED;IACAA,SAASA,CAAA,EAAG;MACV,IAAI,CAACZ,QAAO,GAAI;QAAEC,KAAK,EAAE,EAAE;QAAEC,GAAG,EAAE,EAAE;QAAEC,IAAI,EAAE,EAAE;QAAEC,QAAQ,EAAE;MAAG,CAAC;MAC9D,IAAI,CAACL,IAAG,GAAI,CAAC,EAAE;IACjB,CAAC;IAED;IACAc,UAAUA,CAAA,EAAG;MACX,IAAI,CAACR,IAAG,GAAI,IAAI,CAACA,IAAG,KAAM,OAAM,GAAI,MAAK,GAAI,OAAO;MACpDC,YAAY,CAACQ,OAAO,CAAC,MAAM,EAAE,IAAI,CAACT,IAAI,CAAC,EAAE;IAC3C;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}